# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_alignment.ipynb.

# %% auto 0
__all__ = ['get_fasta', 'run_clustalo', 'aln2df', 'get_aln_freq']

# %% ../nbs/07_alignment.ipynb 3
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from Bio import SeqIO, AlignIO

import subprocess
from pathlib import Path

# %% ../nbs/07_alignment.ipynb 5
def get_fasta(df,seq_col='kd_seq',id_col='kd_ID',path='out.fasta'):
    "Generate fasta file from sequences."
    records = [
        SeqRecord(Seq(row[seq_col]), id=row[id_col], description="")
        for _, row in df.iterrows()
    ]
    SeqIO.write(records, path, "fasta")
    print(len(records))

# %% ../nbs/07_alignment.ipynb 9
def run_clustalo(input_fasta,  # .fasta fname
                 output_aln, # .aln output fname
                 outfmt="clu"):
    "Run Clustal Omega to perform multiple sequence alignment."
    # if the output directory does not exist, create one
    output_aln = Path(output_aln)
    output_aln.parent.mkdir(parents=True, exist_ok=True)

    # run clustalo
    subprocess.run([
        "clustalo", "-i", str(input_fasta),
        "-o", str(output_aln),
        "--force", "--outfmt=clu"
    ], check=True)

# %% ../nbs/07_alignment.ipynb 11
def aln2df(fname):
    'Read .aln file from clustalo output into a dataframe'
    alignment = AlignIO.read(fname, "clustal")
    alignment_array = [list(str(record.seq)) for record in alignment]
    df = pd.DataFrame(alignment_array)
    df.columns = df.columns+1 # use amino acid index starting from 1
    return df

# %% ../nbs/07_alignment.ipynb 13
def get_aln_freq(df):
    "Get frequency of each amino acid across each position from the aln2df output."
    counts_df = df.apply(lambda col: col.value_counts(), axis=0).fillna(0)
    return counts_df.div(counts_df.sum(axis=0), axis=1)
