# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_plot.ipynb.

# %% auto 0
__all__ = ['logo_func', 'get_logo', 'get_heatmap', 'plot_cluster', 'plot_bar', 'plot_corr']

# %% ../nbs/02_plot.ipynb 3
from .feature import *
from .core import *
from fastbook import *
import seaborn as sns
from scipy.stats import spearmanr, pearsonr
import logomaker

import joblib
from adjustText import adjust_text
from pathlib import Path

# %% ../nbs/02_plot.ipynb 4
sns.set(rc={"figure.dpi":300, 'savefig.dpi':300})
sns.set_context('notebook')
sns.set_style("ticks")

# %% ../nbs/02_plot.ipynb 7
def logo_func(df, 
              title = 'logo'):
    "Functions of plotting logo"
    
    sns.set(rc={"figure.dpi":300, 'savefig.dpi':300})
    sns.set_context('notebook')
    sns.set_style("ticks")
    aa = {
        'AG': '#037f04',
        'DEty': '#da143e',
        'F': '#84380b',
        'HQN': '#8d2be1',
        'LMIFWTVC': '#d9a41c',
        'P': '#000000',
        'RK': '#0000ff',
        'ST': '#8d008d',
        'Y': '#84380b',
        # 'pS/pT':'#8d2be1',
        # 'pY':'#8d2be1'
    }
    logo = logomaker.Logo(df,color_scheme = aa,flip_below=False,figsize=(5.5,2.5))
    # logo.style_spines(visible=False)
    logo.style_xticks(fmt='%d')
    logo.ax.set_yticks([])
    # logo.ax.set_xticks([])
    # logo.ax.set_ylabel("log2[ratio to median]")
    # logo.ax.set_xlabel("Position")
    logo.ax.set_title(title)
    
    plt.show()
    plt.close()

# %% ../nbs/02_plot.ipynb 8
def get_logo(df, # Stacked Dataframe with kinase as index, substrates as columns
             kinase, # A specific kinase name in index
               ):
    "Given stacked df (index as kinase, columns as substrates), get specific kinase's logo"
    
    
    #get raw kinase to calculate S/T
    pp = get_one_kinase(df,kinase,normalize=False)
    
    #get S/T ratio value
    ss = pp['S'].sum()
    st = pp['T'].sum()

    S_ctrl = 0.75*ss - 0.25*st
    T_ctrl = 0.75*st - 0.25*ss

    S0 = S_ctrl / max(S_ctrl, T_ctrl)
    T0 = T_ctrl / max(S_ctrl, T_ctrl)

    S_ratio = S0/(S0+T0)
    T_ratio = T0/(S0+T0)
    
    #get normalized kinase
    norm_p = get_one_kinase(df,kinase, normalize=True)
    
    ratio =norm_p.apply(lambda r: r/r.median(),axis=1)

    ratio = np.log2(ratio)

    m = ratio.apply(lambda row: row[row > 0].sum(), axis=1).max()

    new_row = pd.DataFrame({'S': S_ratio*m, 'T':T_ratio*m}, index=[0]) 

    ratio2 = pd.concat([ratio, new_row], ignore_index=False).fillna(0)
    
    #plot logo
    logo_func(ratio2, kinase)

# %% ../nbs/02_plot.ipynb 13
def get_heatmap(df, # Stacked Dataframe with kinase as index, substrates as columns
                kinase # A specific kinase name in index
               ):
    aa_order = [i for i in 'PGACSTVILMFYWHKRQNDEty']
    # position_order = [str(i) for i in range(-5,5)]
    # position_order.remove('0')
    
    kk = get_one_kinase(df, kinase).T
    # kkk = kk.reindex(index=aa_order, columns=position_order)
    kkk = kk.reindex(index=aa_order)
    
    plt.figure(figsize=(6, 10))
    sns.heatmap(kkk, cmap='binary', annot=False)
    plt.title(kinase)
    plt.show()

# %% ../nbs/02_plot.ipynb 17
def plot_cluster(df, # a dataframe with values, and index as identity
                 method='pca', # Could be 'tsne', 'umap'
                 hue=None,
                 complexity = 30, # 30 for tsne, 15 for umap, none for pca
                 palette='tab20', # could be tab10 if less categories
                 legend=False, 
                 name_list=None, # if not none, will annotate each dots in the plot
                 seed = 123
                ):
    
    "Given a dataframe of values, plot it in 2d, method could be pca, tsne, or umap"
    
    embedding_df = reduce_feature(df, method=method, seed=seed, complexity = complexity)
    # x_col, y_col = [col for col in embedding_df.columns if col.startswith(method.upper())]
    x_col, y_col = embedding_df.columns
    sns.relplot(data=embedding_df, x=x_col, y=y_col, hue=hue, palette=palette, s=50, alpha=0.8, legend=legend)
    plt.xticks([])
    plt.yticks([])
    if name_list is not None:
        texts = [plt.text(embedding_df[x_col][i], embedding_df[y_col][i], name_list[i],fontsize=8) for i in range(len(embedding_df))]
        adjust_text(texts, arrowprops=dict(arrowstyle='-', color='black'))
    plt.show()
    plt.close()

# %% ../nbs/02_plot.ipynb 22
def plot_bar(df, # dataframe with a column of values, and a column of category to groupby
             values, # colname of values
             category, # colname of categories which is used to groupby values
             circle = True, # whether or not add dots in the graph
             aspect = 3 # the biger the value is, the wider the graph is
              ):
    
    order = df.groupby(category)[values].mean().sort_values(ascending=False).index
    g = sns.catplot(data=df,
                x=category,
                y=values,
                aspect=aspect,
                order=order,
                kind='bar',
                ci='sd',
                palette='tab20',)
    g.set_xticklabels(rotation=45)
    
    if circle:
        marker = {'marker': 'o', 
                  'color': 'white', 
                  'edgecolor': 'black', 
                  'linewidth': 1.5, 
                  's': 6}

        sns.stripplot(data=df, 
                      x=category, 
                      y=values,
                      order=order,
                      alpha=0.8,
                      ax=g.ax,
                      **marker);

# %% ../nbs/02_plot.ipynb 27
def plot_corr(
              x,
              y,
              xlabel=None,# x axis label
              ylabel=None,# y axis label
              order=1, # polynomial level, if straight, order=1
              method = 'pearson', # can be spearman
             ):
    "Given a dataframe and the name of two columns, plot the two columns' correlation"
    
    if method == 'spearman':
        correlation, pvalue = spearmanr(x, y)
    elif method == 'pearson':
        correlation, pvalue = pearsonr(x, y)
    else:
        raise ValueError("Invalid correlation method. Choose 'spearman' or 'pearson'.")
        
    sns.regplot(
                x=x,
                y=y,
                order=order,
                line_kws={'color': 'gray'}
           )
    
    if xlabel is not None:
        plt.xlabel(xlabel)
        
    if ylabel is not None:
        plt.ylabel(ylabel)
    
    correlation_text = f'Spearman: {correlation:.2f}' if method == 'spearman' else f'Pearson: {correlation:.2f}'

    plt.text(x=0.8, y=0.1, s=correlation_text, transform=plt.gca().transAxes, ha='center', va='center')
    
    plt.show()
    plt.close()
