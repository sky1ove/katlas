# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['Data', 'norm', 'raw2kinase', 'plot_logo', 'raw2logo']

# %% ../nbs/00_core.ipynb 2
import pandas as pd
import numpy as np
import seaborn as sns
import logomaker

# %% ../nbs/00_core.ipynb 4
class Data:
    """
    A class for fetching various datasets.
    """
    
    # Kinase info
    KINASE_INFO_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/STkinase_info.csv"
    KINASE_ESM_RAW_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/kinase_esm.csv"
    KINASE_ESM_PCA_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/kinase_esm_pca32.csv"
    
    # Amino acid info
    AA_INFO_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/aa_info.csv"
    AA_FEATURE_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/aa_rdkit.csv"
    
    # Target info
    RAW_KINASE_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/paper_raw.csv"
    NORM_KINASE_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/paper_norm.csv"

    # Unstacked target
    STANDARD_UNSTACK_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/unstack_standard.csv"
    LOG_UNSTACK_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/unstack_log.csv"
    
    # Stacked target
    STANDARD_STACK_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/pivot_standard.csv"
    LOG_STACK_URL = "https://github.com/sky1ove/katlas/raw/main/dataset/pivot_log.csv"
    
    def __init__(self):
        pass
    
    @staticmethod
    def get_kinase_raw():
        """
        Fetches the supplementary Table 2 "ser_thr_all_raw_matrices" from the nature paper: 
        An atlas of substrate specificities for the human serine/threonine kinome.
        """
        df = pd.read_csv(Data.RAW_KINASE_URL)
        df = df.rename(columns={'Unnamed: 0': 'kinase'})
        return df
    
    
    @staticmethod
    def get_kinase_norm():
        """
        Fetches the supplementary Table 2 "ser_thr_all_norm_matrices" from the nature paper: 
        An atlas of substrate specificities for the human serine/threonine kinome.
        """
        df = pd.read_csv(Data.NORM_KINASE_URL)
        df = df.rename(columns={'Unnamed: 0': 'kinase'})
        return df
    
    
    @staticmethod
    def get_kinase_info():
        """
        Fetches the supplementary Table 1 from the nature paper with additional sequence info
        """
        df = pd.read_csv(Data.KINASE_INFO_URL)
        return df
    
    @staticmethod
    def get_esm():
        """
        Fetches the esm embeddings of kinase
        """
        df = pd.read_csv(Data.KINASE_ESM_RAW_URL)
        return df
    
    @staticmethod
    def get_esm_pca32():
        """
        Fetches the esm embeddings of kinase
        """
        df = pd.read_csv(Data.KINASE_ESM_PCA_URL)
        return df
    
    @staticmethod
    def get_aa_info():
        """
        Fetches the amino acid info
        """
        df = pd.read_csv(Data.AA_INFO_URL)
        return df
    
    @staticmethod
    def get_aa_feature():
        """
        Fetches the 72 rdkit features of a.a. (after removing features with Pearson >0.9)
        """
        df = pd.read_csv(Data.AA_FEATURE_URL)
        return df
    
    
    
    @staticmethod
    def get_standard_unstack():
        """
        Fetches the unstacked standardized raw data
        """
        df = pd.read_csv(Data.STANDARD_UNSTACK_URL)
        return df
    
    @staticmethod
    def get_log_unstack():
        """
        Fetches the log transformed raw data.
        """
        df = pd.read_csv(Data.LOG_UNSTACK_URL)
        return df
    
    @staticmethod
    def get_log_stack():
        """
        Fetches the stacked log transformed raw data.
        """
        df = pd.read_csv(Data.LOG_STACK_URL)
        return df
    
        
    @staticmethod
    def get_standard_stack():
        """
        Fetches the stacked standardized raw data
        """
        df = pd.read_csv(Data.STANDARD_STACK_URL)
        return df

# %% ../nbs/00_core.ipynb 8
def norm(df, #a single kinase's df that has position as index, and a.a. as columns
         PDHK=False, #whether this kinase belongs to PDHK family
        ):
    columns_to_exclude = ['S', 'T', 'C', 't', 'y']
    
    if PDHK:
        columns_to_exclude.append('Y')
        divisor = 16
    else:
        divisor = 17
    
    s = df.drop(columns=columns_to_exclude).sum(1)
    df2 = df.div(s, axis=0)
    df2.C = df2.C / (df2.C.median() * divisor)
    df2['S'] = df2.drop(columns=columns_to_exclude).median(1)
    df2['T'] = df2.drop(columns=columns_to_exclude).median(1)
    df2 = round(df2, 4)
    
    return df2

# %% ../nbs/00_core.ipynb 10
def raw2kinase(df, #dataframe is from the paper's raw data; each raw contains a kinase info at all postiions
               kinase, # a specific kinase you'd like to extract to make a pivot table (position as index, a.a. as columns)
               normalize=False, # normalize according to the paper; special for PDHK1/4
              ):
    df = df.set_index('kinase')
    p = pd.DataFrame(df.loc[kinase],columns = [kinase]).reset_index().rename(columns={'index':'substrate'})
    p['position'] = p.substrate.str.extract('(-?\d+)')
    p['aa'] = p.substrate.str[-1]
    p.position = p.position.astype(int)
    pp = p.pivot(index='position', columns='aa', values=kinase)
    pp = pp.drop(columns=['s'])
    if normalize:
        pp = norm(pp, PDHK=True if kinase == 'PDHK1' or kinase == 'PDHK4' else False)
    return pp

# %% ../nbs/00_core.ipynb 15
def plot_logo(df, 
              title = 'logo'):
    sns.set(rc={"figure.dpi":300, 'savefig.dpi':300})
    sns.set_context('notebook')
    sns.set_style("ticks")
    aa = {
        'AG': '#037f04',
        'DEty': '#da143e',
        'F': '#84380b',
        'HQN': '#8d2be1',
        'LMIFWTVC': '#d9a41c',
        'P': '#000000',
        'RK': '#0000ff',
        'ST': '#8d008d',
        'Y': '#84380b',
        # 'pS/pT':'#8d2be1',
        # 'pY':'#8d2be1'
    }
    logo = logomaker.Logo(df,color_scheme = aa,flip_below=False,figsize=(5.5,2.5))
    # logo.style_spines(visible=False)
    logo.style_xticks(fmt='%d')
    logo.ax.set_yticks([])
    # logo.ax.set_xticks([])
    # logo.ax.set_ylabel("log2[ratio to median]")
    # logo.ax.set_xlabel("Position")
    logo.ax.set_title(title);

# %% ../nbs/00_core.ipynb 16
def raw2logo(df_raw, 
             kinase,
            out_df = False
               ):
    #get raw kinase to calculate S/T
    pp = raw2kinase(df_raw,kinase,normalize=False)
    
    #get S/T ratio value
    ss = pp['S'].sum()
    st = pp['T'].sum()

    S_ctrl = 0.75*ss - 0.25*st
    T_ctrl = 0.75*st - 0.25*ss

    S0 = S_ctrl / max(S_ctrl, T_ctrl)
    T0 = T_ctrl / max(S_ctrl, T_ctrl)

    S_ratio = S0/(S0+T0)
    T_ratio = T0/(S0+T0)
    
    #get normalized kinase
    norm_p = raw2kinase(df_raw,kinase, normalize=True)
    
    ratio =norm_p.apply(lambda r: r/r.median(),axis=1)

    ratio = np.log2(ratio)

    m = ratio.apply(lambda row: row[row > 0].sum(), axis=1).max()

    new_row = pd.DataFrame({'S': S_ratio*m, 'T':T_ratio*m}, index=[0]) 

    ratio2 = pd.concat([ratio, new_row], ignore_index=False).fillna(0)
    
    #plot logo
    plot_logo(ratio2, kinase)
    
    if out_df:
        return ratio2
